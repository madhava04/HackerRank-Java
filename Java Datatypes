/*
Java has 8 primitive data types; char, boolean, byte, short, int, long, float, and double. For this exercise, we'll work with the primitives used to hold integer values (byte, short, int, and long):

A byte is an 8-bit signed integer.
A short is a 16-bit signed integer.
An int is a 32-bit signed integer.
A long is a 64-bit signed integer.
Given an input integer, you must determine which primitive data types are capable of properly storing that input.

To get you started, a portion of the solution is provided for you in the editor.

Reference: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html

Input Format

The first line contains an integer, , denoting the number of test cases.
Each test case, , is comprised of a single line with an integer, , which can be arbitrarily large or small.

Output Format

For each input variable  and appropriate primitive , you must determine if the given primitives are capable of storing it. If yes, then print:

n can be fitted in:
* dataType
If there is more than one appropriate data type, print each one on its own line and order them by size (i.e.: ).

If the number cannot be stored in one of the four aforementioned primitives, print the line:

n can't be fitted anywhere.
Sample Input

5
-150
150000
1500000000
213333333333333333333333333333333333
-100000000000000
Sample Output

-150 can be fitted in:
* short
* int
* long
150000 can be fitted in:
* int
* long
1500000000 can be fitted in:
* int
* long
213333333333333333333333333333333333 can't be fitted anywhere.
-100000000000000 can be fitted in:
* long
Explanation

 can be stored in a short, an int, or a long.

 is very large and is outside of the allowable range of values for the primitive data types discussed in this problem.
 
 
 */
 
  
 
 code
 
 import java.io.*;
import java.util.*;
import java.util.regex.*;  

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int one = sc.nextInt();
        sc.nextLine();
        int b,s,iyeh,l;
        b=0;
        s=0;
        iyeh=0;
        l=0;
        
        
        
        for(int i=0;i<=one;i++)
        {
             String a = sc.nextLine();
             int f = 0 ;
             String bb ="" ;
             String ss ="" ;
             String ii ="" ;
             String ll ="" ;            
            
             
                          
             
                 try {
        byte d = Byte.parseByte(a);
        b =+ 1;
        if(b==1)
        {
             bb = "*byte";
        }
             } catch (NumberFormatException nfe) {
              f = f+ 1;
    }
        
         try {
        Short d = Short.parseShort(a);
         s =+ 1;
         if(s == 1)
         {
             ss = "* short" ; 
         }
    } catch (NumberFormatException nfe) {
        f = f+ 1;
        
    }
         try {
        int d = Integer.parseInt(a);
        iyeh = 1;
        if(iyeh == 1)
         {
             ii = "* int" ;
         }
        
    } catch (NumberFormatException nfe) {
        f = f+1;
    }
         try {
        long d = Long.parseLong(a);
         l=+ 1 ;
        if(l == 1)
         {
             ll = "* long";
         }
    } catch (NumberFormatException nfe) {
        f = f+ 1;
       
    }
                 
        System.out.println(f);
        if(f>0 && f<4)
        {
            System.out.println(a +" can be fitted in:");
            if(b == 1)
            {
                System.out.println(bb);
            }
            else if(s == 1)
            {
                System.out.println(ss);
            }
            else if(iyeh == 1)
            {
                System.out.println(ii);
            }
            else if(l == 1)
            {
                System.out.println(ll);
            }
        }
        else if(f == 4)
        {
            System.out.println(a +" can be fitted anywhere");
        }
        
          
        
          
     
        
             
         
        }
    }
}
